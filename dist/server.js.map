{
  "version": 3,
  "sources": ["../vite.config.ts", "../server/index.ts", "../server/routes.ts", "../server/auth/authService.ts", "../server/auth/authRoutes.ts", "../server/auth/authMiddleware.ts", "../server/chat/chatRoutes.ts", "../server/storage.ts", "../shared/schema.ts", "../server/chat/chatService.ts", "../server/chatbot/chatbotService.ts", "../server/chat/chatController.ts", "../server/chatbot/chatbotRoutes.ts", "../server/chatbot/chatbotController.ts", "../server/vite.ts"],
  "sourcesContent": ["import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n      process.env.REPL_ID !== undefined\n      ? [\n        await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n          m.cartographer(),\n        ),\n      ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n    proxy: {\n      \"/api\": {\n        target: \"http://localhost:3000\",\n        changeOrigin: true,\n        secure: false,\n      },\n    },\n  },\n});", "import express, { type Request, Response, NextFunction } from \"express\";\nimport { config } from 'dotenv';\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport cors from \"cors\";\n\nconsole.log('\uD83D\uDEA8\uD83D\uDEA8\uD83D\uDEA8 RAILWAY UPDATE TEST v5.0 \uD83D\uDEA8\uD83D\uDEA8\uD83D\uDEA8');\n// Load environment variables\nconfig();\n\n// Environment check\nconsole.log('\uD83D\uDD27 Environment check:');\nconsole.log('  JWT_SECRET exists:', !!process.env.JWT_SECRET);\nconsole.log('  DATABASE_URL exists:', !!process.env.DATABASE_PUBLIC_URL);\n\nconst app = express();\n\n// 1. FIRST: JSON parsing middleware (MUST come first)\nconsole.log('\uD83D\uDD27 Setting up express.json() middleware');\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\n\n// DEBUG: Check if body parsing is working\napp.use((req, res, next) => {\n  if (req.path.includes('/api/auth') && req.method === 'POST') {\n    console.error('\uD83D\uDD27 MIDDLEWARE DEBUG - Path:', req.path);\n    console.error('\uD83D\uDD27 MIDDLEWARE DEBUG - Method:', req.method);\n    console.error('\uD83D\uDD27 MIDDLEWARE DEBUG - Body parsed:', !!req.body);\n    console.error('\uD83D\uDD27 MIDDLEWARE DEBUG - Body content:', req.body);\n    console.error('\uD83D\uDD27 MIDDLEWARE DEBUG - Content-Type:', req.headers['content-type']);\n  }\n  next();\n});\n\n// 2. SECOND: CORS middleware (fixed for credentials)\nconsole.log('\uD83D\uDD27 Setting up CORS middleware');\napp.use((req, res, next) => {\n  const origin = req.headers.origin;\n\n  console.error('\uD83C\uDF10 CORS - Processing request:', req.method, req.path, 'from origin:', origin);\n\n  // Allow specific origins (instead of wildcard when using credentials)\n  const allowedOrigins = [\n    'http://localhost:3000',\n    'https://unycompass.vercel.app'\n  ];\n\n  // Check if origin is allowed or is a vercel deployment\n  const isAllowed = !origin || allowedOrigins.includes(origin) ||\n    (origin.includes('unycompass') && origin.includes('.vercel.app'));\n\n  if (isAllowed && origin) {\n    // Always set the actual origin when credentials are used\n    res.header('Access-Control-Allow-Origin', origin);\n    console.error('\u2705 CORS - Origin allowed:', origin);\n  } else if (!origin) {\n    // For requests without origin (like Postman), allow but don't set credentials\n    res.header('Access-Control-Allow-Origin', '*');\n    console.error('\u2705 CORS - No origin, using wildcard');\n  } else {\n    console.error('\u274C CORS - Origin not allowed:', origin);\n    return res.status(403).json({ error: 'CORS: Origin not allowed' });\n  }\n\n  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');\n\n  // Only set credentials to true when we have a specific origin\n  if (origin && isAllowed) {\n    res.header('Access-Control-Allow-Credentials', 'true');\n  }\n\n  // Handle preflight requests\n  if (req.method === 'OPTIONS') {\n    console.error('\u2705 CORS - Handling OPTIONS preflight request');\n    res.sendStatus(200);\n    return;\n  }\n\n  console.error('\u2705 CORS - Headers set, continuing to next middleware');\n  next();\n});\n\n// 3. THIRD: Logging middleware\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"\u2026\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n// 4. LAST: Register routes\n(async () => {\n  console.log('\uD83D\uDD27 Registering routes...');\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // Setup environment-specific serving\n  if (process.env.NODE_ENV === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // Railway-compatible port configuration\n  const port = Number(process.env.PORT) || 3000;\n  const host = process.env.NODE_ENV === \"production\" ? \"0.0.0.0\" : \"127.0.0.1\";\n\n  server.listen(port, host, () => {\n    console.log(`\u2705 Server is running at http://${host}:${port}`);\n    console.log(`\uD83C\uDF0D Environment: ${process.env.NODE_ENV || 'development'}`);\n    console.log(`\uD83D\uDE80 Ready to accept connections`);\n    console.log('\uD83D\uDD0D Railway PORT env var:', process.env.PORT);\n    console.log('\uD83D\uDD0D All env vars:', Object.keys(process.env).filter(key => key.includes('PORT')));\n  });\n})();", "import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\n\n// Import auth modules\nimport { AuthService } from \"./auth/authService\";\nimport authRoutes from \"./auth/authRoutes\";\n\n// Import chat routes\nimport chatRoutes from \"./chat/chatRoutes\";\n\n// Import chatbot module\nimport chatbotRoutes from \"./chatbot/chatbotRoutes\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Initialize auth database - EXACT same as original\n  await AuthService.createUsersTable();\n\n  // =================================\n  // AUTH ENDPOINTS - Now modular but EXACT same functionality\n  // =================================\n  app.use('/api/auth', authRoutes);\n\n  // =================================\n  // CHATBOT ENDPOINTS - Now modular but EXACT same functionality\n  // =================================\n  app.use('/api/chatbot', chatbotRoutes);\n\n  // =================================\n  // CHAT ROUTES - Moved to chat module\n  // =================================\n  app.use('/api', chatRoutes);\n\n  // Health check endpoint removed - handled by serveStatic() in vite.ts\n  // This prevents duplicate route conflicts\n\n  const httpServer = createServer(app);\n  return httpServer;\n}", "// server/auth/authService.ts\r\nimport bcrypt from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\nimport pkg from 'pg';\r\nconst { Pool } = pkg;\r\nimport { config } from 'dotenv';\r\n\r\n// Load environment variables\r\nconfig();\r\n\r\n// PostgreSQL connection - EXACT same as original\r\nconst pool = new Pool({\r\n    connectionString: process.env.DATABASE_PUBLIC_URL,\r\n    ssl: {\r\n        rejectUnauthorized: false\r\n    }\r\n});\r\n\r\nconst JWT_SECRET = process.env.JWT_SECRET;\r\n\r\nexport interface User {\r\n    id: number;\r\n    username: string;\r\n    email: string;\r\n    password_hash?: string;\r\n    created_at: Date;\r\n    updated_at?: Date;\r\n}\r\n\r\nexport class AuthService {\r\n    // Test database connection - EXACT same as original\r\n    static async testConnection(): Promise<boolean> {\r\n        try {\r\n            console.log('Testing database connection...');\r\n            console.log('Connection string:', process.env.DATABASE_PUBLIC_URL?.replace(/:[^:]*@/, ':****@')); // Hide password\r\n\r\n            const client = await pool.connect();\r\n            console.log('\u2705 Database connected successfully!');\r\n\r\n            const result = await client.query('SELECT NOW()');\r\n            console.log('\u2705 Query test successful:', result.rows[0]);\r\n\r\n            client.release();\r\n            return true;\r\n        } catch (err) {\r\n            console.error('\u274C Database connection failed:', err);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Initialize users table - EXACT same as original\r\n    static async createUsersTable(): Promise<void> {\r\n        const isConnected = await AuthService.testConnection();\r\n        if (!isConnected) {\r\n            console.error('\u274C Skipping table creation due to connection failure');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            await pool.query(`\r\n        CREATE TABLE IF NOT EXISTS users (\r\n          id SERIAL PRIMARY KEY,\r\n          username VARCHAR(50) UNIQUE NOT NULL,\r\n          email VARCHAR(100) UNIQUE NOT NULL,\r\n          password_hash VARCHAR(255) NOT NULL,\r\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n        )\r\n      `);\r\n            console.log('\u2705 Users table created or already exists');\r\n        } catch (err) {\r\n            console.error('\u274C Error creating users table:', err);\r\n        }\r\n    }\r\n\r\n    // Register new user - EXACT same logic as original\r\n    static async register(username: string, email: string, password: string) {\r\n        // Validation\r\n        if (!username || !email || !password) {\r\n            throw new Error('Username, email, and password are required');\r\n        }\r\n\r\n        if (password.length < 6) {\r\n            throw new Error('Password must be at least 6 characters long');\r\n        }\r\n\r\n        const existingUser = await pool.query(\r\n            'SELECT id FROM users WHERE username = $1 OR email = $2',\r\n            [username, email]\r\n        );\r\n\r\n        if (existingUser.rows.length > 0) {\r\n            throw new Error('Username or email already exists');\r\n        }\r\n\r\n        const saltRounds = 10;\r\n        const passwordHash = await bcrypt.hash(password, saltRounds);\r\n\r\n        const result = await pool.query(\r\n            'INSERT INTO users (username, email, password_hash) VALUES ($1, $2, $3) RETURNING id, username, email, created_at',\r\n            [username, email, passwordHash]\r\n        );\r\n\r\n        const newUser = result.rows[0];\r\n\r\n        const token = jwt.sign(\r\n            { userId: newUser.id, username: newUser.username },\r\n            JWT_SECRET!,\r\n            { expiresIn: '24h' }\r\n        );\r\n\r\n        return { user: newUser, token };\r\n    }\r\n\r\n    // Login user - EXACT same logic as original\r\n    static async login(username: string, password: string) {\r\n        if (!username || !password) {\r\n            throw new Error('Username and password are required');\r\n        }\r\n\r\n        const result = await pool.query(\r\n            'SELECT id, username, email, password_hash FROM users WHERE username = $1 OR email = $1',\r\n            [username]\r\n        );\r\n\r\n        if (result.rows.length === 0) {\r\n            throw new Error('Invalid credentials');\r\n        }\r\n\r\n        const user = result.rows[0];\r\n\r\n        const isValidPassword = await bcrypt.compare(password, user.password_hash);\r\n\r\n        if (!isValidPassword) {\r\n            throw new Error('Invalid credentials');\r\n        }\r\n\r\n        const token = jwt.sign(\r\n            { userId: user.id, username: user.username },\r\n            JWT_SECRET!,\r\n            { expiresIn: '24h' }\r\n        );\r\n\r\n        return { user: { id: user.id, username: user.username, email: user.email }, token };\r\n    }\r\n\r\n    // Get user by ID - EXACT same logic as original\r\n    static async getUserById(userId: number) {\r\n        const result = await pool.query(\r\n            'SELECT id, username, email, created_at FROM users WHERE id = $1',\r\n            [userId]\r\n        );\r\n\r\n        return result.rows.length > 0 ? result.rows[0] : null;\r\n    }\r\n\r\n    // Update user profile - EXACT same logic as original\r\n    static async updateProfile(userId: number, email: string) {\r\n        if (!email) {\r\n            throw new Error('Email is required');\r\n        }\r\n\r\n        const existingUser = await pool.query(\r\n            'SELECT id FROM users WHERE email = $1 AND id != $2',\r\n            [email, userId]\r\n        );\r\n\r\n        if (existingUser.rows.length > 0) {\r\n            throw new Error('Email already in use');\r\n        }\r\n\r\n        const result = await pool.query(\r\n            'UPDATE users SET email = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2 RETURNING id, username, email, updated_at',\r\n            [email, userId]\r\n        );\r\n\r\n        return result.rows[0];\r\n    }\r\n\r\n    // Update password - EXACT same logic as original\r\n    static async updatePassword(userId: number, currentPassword: string, newPassword: string) {\r\n        if (!currentPassword || !newPassword) {\r\n            throw new Error('Current password and new password are required');\r\n        }\r\n\r\n        if (newPassword.length < 6) {\r\n            throw new Error('New password must be at least 6 characters long');\r\n        }\r\n\r\n        const result = await pool.query(\r\n            'SELECT password_hash FROM users WHERE id = $1',\r\n            [userId]\r\n        );\r\n\r\n        if (result.rows.length === 0) {\r\n            throw new Error('User not found');\r\n        }\r\n\r\n        const isValidPassword = await bcrypt.compare(currentPassword, result.rows[0].password_hash);\r\n\r\n        if (!isValidPassword) {\r\n            throw new Error('Current password is incorrect');\r\n        }\r\n\r\n        const saltRounds = 10;\r\n        const newPasswordHash = await bcrypt.hash(newPassword, saltRounds);\r\n\r\n        await pool.query(\r\n            'UPDATE users SET password_hash = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2',\r\n            [newPasswordHash, userId]\r\n        );\r\n    }\r\n\r\n    // Verify JWT token - EXACT same logic as original\r\n    static verifyToken(token: string) {\r\n        return jwt.verify(token, JWT_SECRET!);\r\n    }\r\n}", "// server/auth/authRoutes.ts\r\nimport { Router, Request, Response } from 'express';\r\nimport { AuthService } from './authService';\r\nimport { authenticateToken } from './authMiddleware';\r\n\r\nconst router = Router();\r\n\r\n// Register new user - EXACT same as original\r\nrouter.post('/register', async (req: Request, res: Response) => {\r\n    try {\r\n        console.error('\uD83D\uDD0D REGISTER DEBUG - req.body:', req.body);\r\n        console.error('\uD83D\uDD0D REGISTER DEBUG - content-type:', req.headers['content-type']);\r\n\r\n        const { username, email, password } = req.body;\r\n\r\n        const { user, token } = await AuthService.register(username, email, password);\r\n\r\n        res.status(201).json({\r\n            message: 'User registered successfully',\r\n            user: {\r\n                id: user.id,\r\n                username: user.username,\r\n                email: user.email,\r\n                createdAt: user.created_at\r\n            },\r\n            token\r\n        });\r\n\r\n    } catch (err: any) {\r\n        console.error('Registration error:', err);\r\n\r\n        if (err.message === 'Username, email, and password are required') {\r\n            return res.status(400).json({ error: err.message });\r\n        }\r\n        if (err.message === 'Password must be at least 6 characters long') {\r\n            return res.status(400).json({ error: err.message });\r\n        }\r\n        if (err.message === 'Username or email already exists') {\r\n            return res.status(400).json({ error: err.message });\r\n        }\r\n\r\n        res.status(500).json({ error: 'Internal server error' });\r\n    }\r\n});\r\n\r\n// Login user - WITH DEBUGGING\r\nrouter.post('/login', async (req: Request, res: Response) => {\r\n    try {\r\n        // EXTENSIVE DEBUG LOGGING\r\n        console.error('\uD83D\uDD0D LOGIN DEBUG START ================================');\r\n        console.error('\uD83D\uDD0D LOGIN DEBUG - req.body:', req.body);\r\n        console.error('\uD83D\uDD0D LOGIN DEBUG - req.body type:', typeof req.body);\r\n        console.error('\uD83D\uDD0D LOGIN DEBUG - req.body keys:', Object.keys(req.body || {}));\r\n        console.error('\uD83D\uDD0D LOGIN DEBUG - req.headers:', req.headers);\r\n        console.error('\uD83D\uDD0D LOGIN DEBUG - content-type:', req.headers['content-type']);\r\n        console.error('\uD83D\uDD0D LOGIN DEBUG - req.method:', req.method);\r\n        console.error('\uD83D\uDD0D LOGIN DEBUG - req.path:', req.path);\r\n        console.error('\uD83D\uDD0D LOGIN DEBUG - req.url:', req.url);\r\n        console.error('\uD83D\uDD0D LOGIN DEBUG - JSON.stringify(req.body):', JSON.stringify(req.body));\r\n        console.error('\uD83D\uDD0D LOGIN DEBUG END ==================================');\r\n\r\n        // Check if body exists\r\n        if (!req.body || typeof req.body !== 'object') {\r\n            console.error('\u274C LOGIN ERROR - req.body is not an object:', req.body);\r\n            return res.status(400).json({ error: 'Invalid request body' });\r\n        }\r\n\r\n        // Check if required fields exist\r\n        const { username, password } = req.body;\r\n\r\n        console.error('\uD83D\uDD0D LOGIN DEBUG - Extracted username:', username);\r\n        console.error('\uD83D\uDD0D LOGIN DEBUG - Extracted password:', password ? '[HIDDEN]' : 'undefined');\r\n\r\n        if (!username || !password) {\r\n            console.error('\u274C LOGIN ERROR - Missing username or password');\r\n            return res.status(400).json({ error: 'Username and password are required' });\r\n        }\r\n\r\n        console.error('\u2705 LOGIN DEBUG - Calling AuthService.login...');\r\n        const { user, token } = await AuthService.login(username, password);\r\n\r\n        console.error('\u2705 LOGIN DEBUG - AuthService.login successful');\r\n        res.json({\r\n            message: 'Login successful',\r\n            user: {\r\n                id: user.id,\r\n                username: user.username,\r\n                email: user.email\r\n            },\r\n            token\r\n        });\r\n\r\n    } catch (err: any) {\r\n        console.error('\u274C Login error:', err);\r\n        console.error('\u274C Login error stack:', err.stack);\r\n\r\n        if (err.message === 'Username and password are required') {\r\n            return res.status(400).json({ error: err.message });\r\n        }\r\n        if (err.message === 'Invalid credentials') {\r\n            return res.status(401).json({ error: err.message });\r\n        }\r\n\r\n        res.status(500).json({ error: 'Internal server error' });\r\n    }\r\n});\r\n\r\n// Add a test endpoint to verify body parsing\r\nrouter.post('/test', (req: Request, res: Response) => {\r\n    console.error('\uD83E\uDDEA TEST ENDPOINT - req.body:', req.body);\r\n    console.error('\uD83E\uDDEA TEST ENDPOINT - content-type:', req.headers['content-type']);\r\n    console.error('\uD83E\uDDEA TEST ENDPOINT - headers:', req.headers);\r\n\r\n    res.json({\r\n        message: 'Test endpoint reached',\r\n        body: req.body,\r\n        headers: req.headers,\r\n        contentType: req.headers['content-type']\r\n    });\r\n});\r\n\r\n// Get user profile - EXACT same as original\r\nrouter.get('/profile', authenticateToken, async (req: Request, res: Response) => {\r\n    try {\r\n        const user = await AuthService.getUserById(req.user!.userId);\r\n\r\n        if (!user) {\r\n            return res.status(404).json({ error: 'User not found' });\r\n        }\r\n\r\n        res.json({ user });\r\n\r\n    } catch (err: any) {\r\n        console.error('Profile error:', err);\r\n        res.status(500).json({ error: 'Internal server error' });\r\n    }\r\n});\r\n\r\n// Update user profile - EXACT same as original\r\nrouter.put('/profile', authenticateToken, async (req: Request, res: Response) => {\r\n    try {\r\n        const { email } = req.body;\r\n\r\n        const updatedUser = await AuthService.updateProfile(req.user!.userId, email);\r\n\r\n        res.json({\r\n            message: 'Profile updated successfully',\r\n            user: updatedUser\r\n        });\r\n\r\n    } catch (err: any) {\r\n        console.error('Profile update error:', err);\r\n\r\n        if (err.message === 'Email is required') {\r\n            return res.status(400).json({ error: err.message });\r\n        }\r\n        if (err.message === 'Email already in use') {\r\n            return res.status(400).json({ error: err.message });\r\n        }\r\n\r\n        res.status(500).json({ error: 'Internal server error' });\r\n    }\r\n});\r\n\r\n// Update password - EXACT same as original\r\nrouter.put('/password', authenticateToken, async (req: Request, res: Response) => {\r\n    try {\r\n        const { currentPassword, newPassword } = req.body;\r\n\r\n        await AuthService.updatePassword(req.user!.userId, currentPassword, newPassword);\r\n\r\n        res.json({ message: 'Password updated successfully' });\r\n\r\n    } catch (err: any) {\r\n        console.error('Password update error:', err);\r\n\r\n        if (err.message === 'Current password and new password are required') {\r\n            return res.status(400).json({ error: err.message });\r\n        }\r\n        if (err.message === 'New password must be at least 6 characters long') {\r\n            return res.status(400).json({ error: err.message });\r\n        }\r\n        if (err.message === 'User not found') {\r\n            return res.status(404).json({ error: err.message });\r\n        }\r\n        if (err.message === 'Current password is incorrect') {\r\n            return res.status(401).json({ error: err.message });\r\n        }\r\n\r\n        res.status(500).json({ error: 'Internal server error' });\r\n    }\r\n});\r\n\r\n// Logout - EXACT same as original\r\nrouter.post('/logout', authenticateToken, (req: Request, res: Response) => {\r\n    res.json({ message: 'Logout successful' });\r\n});\r\n\r\nexport default router;", "// server/auth/authMiddleware.ts - ENHANCED VERSION\r\nimport { Request, Response, NextFunction } from 'express';\r\nimport { AuthService } from './authService';\r\n\r\n// Extend Express Request interface to include user\r\ndeclare global {\r\n    namespace Express {\r\n        interface Request {\r\n            user?: {\r\n                userId: number;\r\n                username: string;\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\n// Enhanced authentication middleware with better error handling\r\nexport const authenticateToken = (req: Request, res: Response, next: NextFunction) => {\r\n    console.log('\uD83D\uDD10 Auth middleware called for:', req.method, req.path);\r\n\r\n    const authHeader = req.headers['authorization'];\r\n    const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN\r\n\r\n    if (!token) {\r\n        console.log('\u274C No token provided');\r\n        return res.status(401).json({ error: 'Access token required' });\r\n    }\r\n\r\n    try {\r\n        const decoded = AuthService.verifyToken(token) as any;\r\n        console.log('\u2705 Token verified for user:', decoded.userId, decoded.username);\r\n        req.user = decoded;\r\n        next();\r\n    } catch (err: any) {\r\n        console.log('\u274C Token verification failed:', err.message);\r\n\r\n        // Handle different JWT errors appropriately\r\n        if (err.name === 'TokenExpiredError') {\r\n            console.log('\uD83D\uDD52 Token expired at:', err.expiredAt);\r\n            return res.status(401).json({\r\n                error: 'Token expired',\r\n                expiredAt: err.expiredAt,\r\n                code: 'TOKEN_EXPIRED'\r\n            });\r\n        } else if (err.name === 'JsonWebTokenError') {\r\n            console.log('\uD83D\uDD12 Invalid token format');\r\n            return res.status(401).json({\r\n                error: 'Invalid token format',\r\n                code: 'INVALID_TOKEN'\r\n            });\r\n        } else {\r\n            console.log('\uD83D\uDEA8 Unknown token error:', err);\r\n            return res.status(403).json({\r\n                error: 'Token verification failed',\r\n                code: 'VERIFICATION_FAILED'\r\n            });\r\n        }\r\n    }\r\n};", "import { Router } from \"express\";\r\nimport { ChatController } from \"./chatController\";\r\nimport { authenticateToken } from \"../auth/authMiddleware\"; // \uD83D\uDC48 ADDED\r\n\r\nconst router = Router();\r\nconst chatController = new ChatController();\r\n\r\n// Public endpoint - no auth needed\r\nrouter.get(\"/personality-types\", chatController.getPersonalityTypes);\r\n\r\n// \uD83D\uDC48 UPDATED: All other endpoints require authentication\r\nrouter.post(\"/chat-sessions\", authenticateToken, chatController.createChatSession);\r\nrouter.get(\"/chat-sessions\", authenticateToken, chatController.getChatSessions);\r\nrouter.post(\"/messages\", authenticateToken, chatController.createMessage);\r\nrouter.get(\"/messages/:sessionId\", authenticateToken, chatController.getMessagesBySessionId);\r\n\r\nexport default router;", "import { drizzle } from 'drizzle-orm/node-postgres';\nimport { Pool } from 'pg';\nimport { eq, desc, sql } from 'drizzle-orm';\nimport { users, chatSessions, messages, type User, type InsertUser, type ChatSession, type Message, type InsertChatSession, type InsertMessage } from \"@shared/schema\";\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_PUBLIC_URL!,\n});\nconst db = drizzle(pool);\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  createChatSession(session: InsertChatSession): Promise<ChatSession>;\n  getChatSessions(): Promise<ChatSession[]>;\n  getChatSessionsByUserId(userId: number, limit?: number): Promise<ChatSession[]>;\n  getChatSessionsByUserIdPaginated(userId: number, limit: number, offset: number): Promise<ChatSession[]>;\n  getTotalSessionsByUserId(userId: number): Promise<number>;\n  createMessage(message: InsertMessage): Promise<Message>;\n  getMessagesBySessionId(sessionId: number): Promise<Message[]>;\n  getRecentMessages(sessionId: number, limit: number): Promise<Message[]>;\n  updateChatSessionTimestamp(sessionId: number): Promise<void>;\n}\n\nexport class DbStorage implements IStorage {\n  async getUser(id: number): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username)).limit(1);\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async createChatSession(insertSession: InsertChatSession): Promise<ChatSession> {\n    const now = new Date();\n    const sessionData = {\n      ...insertSession,\n      createdAt: now,\n      updatedAt: now\n    };\n\n    const [session] = await db.insert(chatSessions).values(sessionData).returning();\n    return session;\n  }\n\n  async getChatSessions(): Promise<ChatSession[]> {\n    return await db.select().from(chatSessions).orderBy(desc(chatSessions.updatedAt));\n  }\n\n  async getChatSessionsByUserId(userId: number, limit: number = 1000): Promise<ChatSession[]> {\n    return await db\n      .select()\n      .from(chatSessions)\n      .where(eq(chatSessions.userId, userId))\n      .orderBy(desc(chatSessions.updatedAt))\n      .limit(limit);\n  }\n\n  async getChatSessionsByUserIdPaginated(userId: number, limit: number, offset: number): Promise<ChatSession[]> {\n    return await db\n      .select()\n      .from(chatSessions)\n      .where(eq(chatSessions.userId, userId))\n      .orderBy(desc(chatSessions.updatedAt))\n      .limit(limit)\n      .offset(offset);\n  }\n\n  async getTotalSessionsByUserId(userId: number): Promise<number> {\n    const result = await db\n      .select({ count: sql`count(*)` })\n      .from(chatSessions)\n      .where(eq(chatSessions.userId, userId));\n\n    return parseInt(result[0].count as string);\n  }\n\n  async createMessage(insertMessage: InsertMessage): Promise<Message> {\n    const [message] = await db.insert(messages).values(insertMessage).returning();\n    return message;\n  }\n\n  async getMessagesBySessionId(sessionId: number): Promise<Message[]> {\n    return await db\n      .select()\n      .from(messages)\n      .where(eq(messages.chatSessionId, sessionId))\n      .orderBy(messages.createdAt);\n  }\n\n  async getRecentMessages(sessionId: number, limit: number): Promise<Message[]> {\n    return await db\n      .select()\n      .from(messages)\n      .where(eq(messages.chatSessionId, sessionId))\n      .orderBy(desc(messages.createdAt))\n      .limit(limit)\n      .then(results => results.reverse());\n  }\n\n  async updateChatSessionTimestamp(sessionId: number): Promise<void> {\n    await db\n      .update(chatSessions)\n      .set({ updatedAt: new Date() })\n      .where(eq(chatSessions.id, sessionId));\n  }\n}\n\nexport const storage = new DbStorage();", "import { table } from \"console\";\nimport { IsPrimaryKey, NotNull } from \"drizzle-orm\";\nimport { pgTable, text, serial, integer, boolean, timestamp, varchar, PgSerialBuilderInitial, PgTextBuilder } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// \uD83D\uDC48 FIXED: Match your EXACT existing users table structure\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: varchar(\"username\", { length: 50 }).notNull().unique(),\n  email: varchar(\"email\", { length: 100 }).notNull().unique(),\n  password_hash: varchar(\"password_hash\", { length: 255 }).notNull(),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow(),\n});\n\n// \uD83D\uDC48 NEW: Chat tables (these will be created)\nexport const chatSessions = pgTable(\"chat_sessions\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(),\n  title: text(\"title\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const messages = pgTable(\"messages\", {\n  id: serial(\"id\").primaryKey(),\n  chatSessionId: integer(\"chat_session_id\").notNull(),\n  content: text(\"content\").notNull(),\n  isUser: boolean(\"is_user\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  email: true,\n  password_hash: true,\n});\n\n// \u2705 FIXED: Include userId in the schema validation\nexport const insertChatSessionSchema = createInsertSchema(chatSessions).pick({\n  userId: true,\n  title: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).pick({\n  chatSessionId: true,\n  content: true,\n  isUser: true,\n});\n\n// Extended interfaces for chatbot functionality\nexport interface ChatbotRequest {\n  question: string;\n  personalityType?: string;\n}\n\nexport interface ChatbotResponse {\n  success: boolean;\n  question: string;\n  answer: string;\n  user: string;\n  personalityType?: string;\n  timestamp: string;\n  error?: string;\n  details?: string;\n}\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type ChatSession = typeof chatSessions.$inferSelect;\nexport type Message = typeof messages.$inferSelect;\nexport type InsertChatSession = z.infer<typeof insertChatSessionSchema>;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;", "import { storage } from \"../storage\";\r\nimport { insertChatSessionSchema, insertMessageSchema } from \"@shared/schema\";\r\n\r\nconst PERSONALITY_TYPES = [\r\n    { id: 1, name: \"Analysts\", code: \"NT \u2022 INTP \u2022 ENTP \u2022 ENTJ\", description: \"Think critically and strategically, excelling in complex problem-solving and innovation.\" },\r\n    { id: 2, name: \"Diplomats\", code: \"NF \u2022 INFP \u2022 ENFP \u2022 INFJ\", description: \"Focus on human potential and meaningful connections, inspiring positive change.\" },\r\n    { id: 3, name: \"Sentinels\", code: \"SJ \u2022 ISTJ \u2022 ISFJ \u2022 ESTJ\", description: \"Value stability and order, creating reliable systems and maintaining traditions.\" },\r\n    { id: 4, name: \"Explorers\", code: \"SP \u2022 ISTP \u2022 ISFP \u2022 ESTP\", description: \"Embrace spontaneity and adaptability, thriving in dynamic environments.\" }\r\n];\r\n\r\nexport class ChatService {\r\n    static async getPersonalityTypes() {\r\n        return PERSONALITY_TYPES;\r\n    }\r\n\r\n    static async createChatSession(data: any) {\r\n        try {\r\n            const validatedData = insertChatSessionSchema.parse(data);\r\n\r\n            if (!validatedData.userId) {\r\n                throw new Error('userId is required for chat session creation');\r\n            }\r\n\r\n            const result = await storage.createChatSession(validatedData);\r\n            return result;\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                if (error.message.includes('validation')) {\r\n                    throw new Error(`Validation failed: ${error.message}`);\r\n                }\r\n                if (error.message.includes('database') || error.message.includes('connection')) {\r\n                    throw new Error(`Database error: ${error.message}`);\r\n                }\r\n                throw error;\r\n            }\r\n\r\n            throw new Error('Unknown error during chat session creation');\r\n        }\r\n    }\r\n\r\n    static async getChatSessions() {\r\n        try {\r\n            return await storage.getChatSessions();\r\n        } catch (error) {\r\n            throw new Error('Failed to fetch chat sessions');\r\n        }\r\n    }\r\n\r\n    static async getChatSessionsByUserId(userId: number, limit?: number, offset?: number) {\r\n        try {\r\n            if (!userId) {\r\n                throw new Error('userId is required');\r\n            }\r\n\r\n            if (limit !== undefined && offset !== undefined) {\r\n                return await storage.getChatSessionsByUserIdPaginated(userId, limit, offset);\r\n            }\r\n\r\n            return await storage.getChatSessionsByUserId(userId, limit);\r\n        } catch (error) {\r\n            throw new Error('Failed to fetch user chat sessions');\r\n        }\r\n    }\r\n\r\n    static async getTotalSessionsByUserId(userId: number) {\r\n        try {\r\n            if (!userId) {\r\n                throw new Error('userId is required');\r\n            }\r\n\r\n            return await storage.getTotalSessionsByUserId(userId);\r\n        } catch (error) {\r\n            throw new Error('Failed to get total sessions count');\r\n        }\r\n    }\r\n\r\n    static async createMessage(data: any) {\r\n        try {\r\n            const validatedData = insertMessageSchema.parse(data);\r\n\r\n            if (!validatedData.chatSessionId) {\r\n                throw new Error('chatSessionId is required for message creation');\r\n            }\r\n            if (!validatedData.content || validatedData.content.trim() === '') {\r\n                throw new Error('content is required and cannot be empty');\r\n            }\r\n            if (typeof validatedData.isUser !== 'boolean') {\r\n                throw new Error('isUser must be a boolean value');\r\n            }\r\n\r\n            const result = await storage.createMessage(validatedData);\r\n            return result;\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                throw error;\r\n            }\r\n\r\n            throw new Error('Unknown error during message creation');\r\n        }\r\n    }\r\n\r\n    static async getMessagesBySessionId(sessionId: number) {\r\n        try {\r\n            if (!sessionId) {\r\n                throw new Error('sessionId is required');\r\n            }\r\n\r\n            const result = await storage.getMessagesBySessionId(sessionId);\r\n            return result;\r\n        } catch (error) {\r\n            throw new Error('Failed to fetch session messages');\r\n        }\r\n    }\r\n\r\n    static async getRecentMessages(sessionId: number, limit: number = 10) {\r\n        try {\r\n            if (!sessionId) {\r\n                throw new Error('sessionId is required');\r\n            }\r\n\r\n            const result = await storage.getRecentMessages(sessionId, limit);\r\n            return result;\r\n        } catch (error) {\r\n            throw new Error('Failed to fetch recent messages');\r\n        }\r\n    }\r\n\r\n    static async updateChatSessionTimestamp(sessionId: number) {\r\n        try {\r\n            if (!sessionId) {\r\n                throw new Error('sessionId is required');\r\n            }\r\n\r\n            await storage.updateChatSessionTimestamp(sessionId);\r\n        } catch (error) {\r\n            throw new Error('Failed to update session timestamp');\r\n        }\r\n    }\r\n}", "import axios from 'axios';\r\n\r\nexport class ChatbotService {\r\n    private static readonly FLASK_API_URL =\r\n        process.env.FLASK_API_URL || \"https://unycompass-production.up.railway.app\";\r\n    // Debug logging\r\n    static {\r\n        console.log('\uD83D\uDD0D Debug Info:');\r\n        console.log('\uD83D\uDD0D process.env.FLASK_API_URL:', process.env.FLASK_API_URL);\r\n        console.log('\uD83D\uDD0D Final FLASK_API_URL:', this.FLASK_API_URL);\r\n        console.log('\uD83D\uDD0D All env vars:', Object.keys(process.env).filter(k => k.includes('FLASK')));\r\n    }\r\n    static async callFlaskChatbot(question: string, personalityType?: string) {\r\n        try {\r\n            let contextualQuestion = question;\r\n            if (personalityType && personalityType !== 'chatbot' && personalityType !== 'unknown') {\r\n                contextualQuestion = `I am a ${personalityType.toUpperCase()} personality type. ${question}`;\r\n            }\r\n\r\n            console.log(`\uD83C\uDF10 Calling Flask API: ${this.FLASK_API_URL}/chat`);\r\n            console.log(`\uD83D\uDCDD Question to send: ${contextualQuestion.substring(0, 100)}...`);\r\n\r\n            const response = await axios.post(`${this.FLASK_API_URL}/chat`, {\r\n                message: contextualQuestion\r\n            }, {\r\n                timeout: 30000,\r\n                headers: { 'Content-Type': 'application/json' }\r\n            });\r\n\r\n            console.log('\u2705 Flask API response received:', response.data);\r\n\r\n            return {\r\n                success: true,\r\n                question: response.data.question,\r\n                answer: response.data.response,\r\n                response: response.data.response,\r\n                timestamp: response.data.timestamp\r\n            };\r\n\r\n        } catch (error: any) {\r\n            console.error('\u274C Flask API error:', error);\r\n\r\n            let errorMessage = 'Failed to connect to chatbot service';\r\n\r\n            if (error.response) {\r\n                console.error('\u274C Server error response:', error.response.data);\r\n                errorMessage = error.response.data?.error || `Server error: ${error.response.status}`;\r\n            } else if (error.request) {\r\n                console.error('\u274C No response received:', error.request);\r\n                errorMessage = 'No response from chatbot service. Make sure Flask API is running on port 5001.';\r\n            } else {\r\n                console.error('\u274C Request setup error:', error.message);\r\n                errorMessage = error.message || 'Unknown error occurred';\r\n            }\r\n\r\n            return {\r\n                success: false,\r\n                error: errorMessage\r\n            };\r\n        }\r\n    }\r\n\r\n    static async askQuestion(question: string, personalityType?: string) {\r\n        return await this.callFlaskChatbot(question, personalityType);\r\n    }\r\n\r\n    static async checkStatus() {\r\n        try {\r\n            console.log(`\uD83D\uDD0D Checking Flask API status: ${this.FLASK_API_URL}/status`);\r\n\r\n            const response = await axios.get(`${this.FLASK_API_URL}/status`, {\r\n                timeout: 10000\r\n            });\r\n\r\n            console.log('\u2705 Status check response:', response.data);\r\n\r\n            return {\r\n                success: true,\r\n                status: response.data.status,\r\n                message: 'Flask API is ready'\r\n            };\r\n\r\n        } catch (error: any) {\r\n            console.error('\u274C Status check error:', error);\r\n\r\n            let errorMessage = 'Flask API is offline';\r\n            if (error.code === 'ECONNREFUSED') {\r\n                errorMessage = 'Flask API is not running. Please start the Flask server on port 5001.';\r\n            } else if (error.code === 'ENOTFOUND') {\r\n                errorMessage = 'Cannot reach Flask API. Check if it\\'s running on localhost:5001.';\r\n            }\r\n\r\n            return {\r\n                success: false,\r\n                error: errorMessage\r\n            };\r\n        }\r\n    }\r\n}\r\n", "import { Request, Response } from \"express\";\r\nimport { ChatService } from \"./chatService\";\r\nimport { ChatbotService } from \"../chatbot/chatbotService\";\r\n\r\nexport class ChatController {\r\n    getPersonalityTypes = async (req: Request, res: Response) => {\r\n        try {\r\n            const types = await ChatService.getPersonalityTypes();\r\n            res.json(types);\r\n        } catch (error) {\r\n            res.status(500).json({ message: \"Failed to fetch personality types\" });\r\n        }\r\n    };\r\n\r\n    createChatSession = async (req: any, res: Response) => {\r\n        try {\r\n            if (!req.user || !req.user.userId) {\r\n                console.error(\"No authenticated user found\");\r\n                return res.status(401).json({\r\n                    message: \"Authentication required\",\r\n                    error: \"No user found in request\"\r\n                });\r\n            }\r\n\r\n            const sessionData = {\r\n                ...req.body,\r\n                userId: req.user.userId\r\n            };\r\n\r\n            const session = await ChatService.createChatSession(sessionData);\r\n            res.json(session);\r\n        } catch (error) {\r\n            console.error(\"Create chat session error:\", error);\r\n\r\n            const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\r\n            const errorDetails = error instanceof Error ? error.stack : error;\r\n\r\n            res.status(500).json({\r\n                message: \"Failed to create chat session\",\r\n                error: errorMessage,\r\n                details: errorDetails\r\n            });\r\n        }\r\n    };\r\n\r\n    getChatSessions = async (req: any, res: Response) => {\r\n        try {\r\n            const page = parseInt(req.query.page as string) || 1;\r\n            const limit = parseInt(req.query.limit as string) || 10;\r\n            const offset = (page - 1) * limit;\r\n\r\n            const totalSessions = await ChatService.getTotalSessionsByUserId(req.user.userId);\r\n            const sessions = await ChatService.getChatSessionsByUserId(req.user.userId, limit, offset);\r\n\r\n            res.json({\r\n                sessions,\r\n                pagination: {\r\n                    currentPage: page,\r\n                    totalPages: Math.ceil(totalSessions / limit),\r\n                    totalSessions,\r\n                    hasMore: page * limit < totalSessions\r\n                }\r\n            });\r\n        } catch (error) {\r\n            res.status(500).json({ message: \"Failed to fetch chat sessions\" });\r\n        }\r\n    };\r\n\r\n    createMessage = async (req: any, res: Response) => {\r\n        try {\r\n            const validatedData = req.body;\r\n\r\n            const userMessage = await ChatService.createMessage(validatedData);\r\n\r\n            if (validatedData.isUser) {\r\n                try {\r\n                    const recentMessages = await ChatService.getRecentMessages(\r\n                        validatedData.chatSessionId,\r\n                        8\r\n                    );\r\n\r\n                    const contextString = recentMessages.length > 0\r\n                        ? recentMessages\r\n                            .map(msg => `${msg.isUser ? \"User\" : \"Assistant\"}: ${msg.content}`)\r\n                            .join(\"\\n\") + \"\\n\\n\"\r\n                        : \"\";\r\n\r\n                    const fullPrompt = `${contextString}User: ${validatedData.content}`;\r\n\r\n                    const chatbotResponse = await ChatbotService.callFlaskChatbot(fullPrompt);\r\n\r\n                    const aiResponseContent = chatbotResponse?.success\r\n                        ? chatbotResponse.answer || chatbotResponse.response\r\n                        : \"I'm having trouble accessing the Hunter College information right now. Please try asking about specific programs or requirements.\";\r\n\r\n                    const aiResponse = await ChatService.createMessage({\r\n                        chatSessionId: validatedData.chatSessionId,\r\n                        content: aiResponseContent,\r\n                        isUser: false,\r\n                    });\r\n\r\n                    await ChatService.updateChatSessionTimestamp(validatedData.chatSessionId);\r\n\r\n                    res.json({ userMessage, aiResponse });\r\n\r\n                } catch (error) {\r\n                    console.error(\"AI processing error:\", error);\r\n\r\n                    const fallbackResponse = await ChatService.createMessage({\r\n                        chatSessionId: validatedData.chatSessionId,\r\n                        content: \"I'm here to help you find information about Hunter College programs. What would you like to know about?\",\r\n                        isUser: false,\r\n                    });\r\n\r\n                    await ChatService.updateChatSessionTimestamp(validatedData.chatSessionId);\r\n                    res.json({ userMessage, aiResponse: fallbackResponse });\r\n                }\r\n            } else {\r\n                res.json(userMessage);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Create message error:\", error);\r\n            res.status(500).json({\r\n                message: \"Failed to create message\",\r\n                error: error instanceof Error ? error.message : \"Unknown error\"\r\n            });\r\n        }\r\n    };\r\n\r\n    getMessagesBySessionId = async (req: any, res: Response) => {\r\n        try {\r\n            const sessionId = parseInt(req.params.sessionId);\r\n\r\n            const userSessions = await ChatService.getChatSessionsByUserId(req.user.userId);\r\n            const sessionExists = userSessions.some(session => session.id === sessionId);\r\n\r\n            if (!sessionExists) {\r\n                console.warn(\"Access denied to session:\", sessionId);\r\n                return res.status(403).json({ message: \"Access denied to this chat session\" });\r\n            }\r\n\r\n            const messages = await ChatService.getMessagesBySessionId(sessionId);\r\n            res.json(messages);\r\n        } catch (error) {\r\n            console.error(\"Get messages error:\", error);\r\n            res.status(500).json({ message: \"Failed to fetch messages\" });\r\n        }\r\n    };\r\n}", "import { Router } from \"express\";\r\nimport { ChatbotController } from \"./chatbotController\";\r\nimport { authenticateToken } from \"../auth/authMiddleware\";\r\n\r\nconst router = Router();\r\n\r\n// Ask chatbot endpoint (authenticated users only) - Updated to include personality type\r\nrouter.post('/ask', authenticateToken, ChatbotController.ask);\r\n\r\n// Check chatbot status endpoint\r\nrouter.get('/status', authenticateToken, ChatbotController.status);\r\n\r\nexport default router;", "import { Request, Response } from \"express\";\r\nimport { ChatbotService } from \"./chatbotService\";\r\n\r\nexport class ChatbotController {\r\n    static async ask(req: any, res: Response) {\r\n        try {\r\n            const { question, personalityType } = req.body;\r\n\r\n            if (!question || !question.trim()) {\r\n                return res.status(400).json({\r\n                    success: false,\r\n                    error: 'Question is required'\r\n                });\r\n            }\r\n\r\n            console.log(`User ${req.user.username} (${personalityType || 'no personality'}) asked: ${question}`);\r\n\r\n            // Call Python chatbot with personality context\r\n            const response = await ChatbotService.askQuestion(question, personalityType);\r\n\r\n            // Check if the response indicates an error\r\n            if (!(response as any).success) {\r\n                return res.status(500).json({\r\n                    success: false,\r\n                    error: 'Chatbot error',\r\n                    details: (response as any).error\r\n                });\r\n            }\r\n\r\n            res.json({\r\n                success: true,\r\n                question: (response as any).question,\r\n                answer: (response as any).answer,\r\n                user: req.user.username,\r\n                personalityType: personalityType || null,\r\n                timestamp: new Date().toISOString()\r\n            });\r\n\r\n        } catch (error: any) {\r\n            console.error('Chatbot API error:', error);\r\n            res.status(500).json({\r\n                success: false,\r\n                error: 'Internal server error',\r\n                details: error.message\r\n            });\r\n        }\r\n    }\r\n\r\n    static async status(req: any, res: Response) {\r\n        try {\r\n            console.log('Checking chatbot status...');\r\n\r\n            // Test if Python chatbot is working\r\n            const testResponse = await ChatbotService.checkStatus();\r\n            console.log('Status check response:', testResponse);\r\n\r\n            const isWorking = (testResponse as any).success;\r\n\r\n            res.json({\r\n                status: isWorking ? 'online' : 'offline',\r\n                pythonWorking: isWorking,\r\n                message: isWorking ? 'Chatbot is ready' : ((testResponse as any).error || 'Chatbot unavailable')\r\n            });\r\n        } catch (error: any) {\r\n            console.error('Status check error:', error);\r\n            res.json({\r\n                status: 'offline',\r\n                pythonWorking: false,\r\n                message: error.message\r\n            });\r\n        }\r\n    }\r\n}", "import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport { nanoid } from \"nanoid\";\nimport { fileURLToPath } from 'url';\n\n// Handle __dirname in ES modules for bundled environment\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  // Only setup Vite in development\n  if (process.env.NODE_ENV !== \"development\") {\n    log(\"\u26A0\uFE0F  Vite setup skipped - production environment\");\n    return;\n  }\n\n  try {\n    // Check if vite config exists (for root deployment)\n    const viteConfigPath = path.resolve(__dirname, \"..\", \"vite.config.ts\");\n    const hasViteConfig = fs.existsSync(viteConfigPath);\n\n    if (!hasViteConfig) {\n      log(\"\u26A0\uFE0F  Vite config not found - skipping Vite dev setup\");\n      return;\n    }\n\n    // Dynamically import vite config\n    const viteConfigModule = await import(\"../vite.config.ts\");\n    const viteConfig = viteConfigModule.default;\n\n    const serverOptions = {\n      middlewareMode: true,\n      hmr: { server },\n      allowedHosts: true as const,\n    };\n\n    const vite = await createViteServer({\n      ...viteConfig,\n      configFile: false,\n      customLogger: {\n        ...viteLogger,\n        error: (msg, options) => {\n          viteLogger.error(msg, options);\n          process.exit(1);\n        },\n      },\n      server: serverOptions,\n      appType: \"custom\",\n    });\n\n    app.use(vite.middlewares);\n    app.use(\"*\", async (req, res, next) => {\n      const url = req.originalUrl;\n\n      try {\n        const clientTemplate = path.resolve(\n          __dirname,\n          \"..\",\n          \"client\",\n          \"index.html\",\n        );\n\n        // Check if client template exists\n        if (!fs.existsSync(clientTemplate)) {\n          log(`\u26A0\uFE0F  Client template not found: ${clientTemplate}`);\n          return next();\n        }\n\n        // always reload the index.html file from disk incase it changes\n        let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n        template = template.replace(\n          `src=\"/src/main.tsx\"`,\n          `src=\"/src/main.tsx?v=${nanoid()}\"`,\n        );\n        const page = await vite.transformIndexHtml(url, template);\n        res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n      } catch (e) {\n        vite.ssrFixStacktrace(e as Error);\n        next(e);\n      }\n    });\n\n    log(\"\u2705 Vite dev server setup complete\");\n  } catch (error) {\n    log(`\u26A0\uFE0F  Could not setup Vite dev server: ${error}`);\n  }\n}\n\nexport function serveStatic(app: Express) {\n  // For backend-only Railway deployment, don't serve static files\n  // Frontend is deployed separately on Vercel\n  log(\"\uD83D\uDCC1 Backend-only deployment - static files handled by Vercel\");\n\n  // Add health check endpoints\n  app.get(\"/\", (req, res) => {\n    res.json({\n      message: \"UNYCompass Auth API Server\",\n      version: \"1.0.0\",\n      environment: process.env.NODE_ENV || \"production\",\n      timestamp: new Date().toISOString(),\n      status: \"running\"\n    });\n  });\n\n  // API health check\n  app.get(\"/api/health\", (req, res) => {\n    res.json({\n      status: \"ok\",\n      service: \"auth-backend\",\n      timestamp: new Date().toISOString(),\n      database: !!process.env.DATABASE_PUBLIC_URL ? \"configured\" : \"missing\",\n      jwt: !!process.env.JWT_SECRET ? \"configured\" : \"missing\"\n    });\n  });\n\n  // Catch-all for unknown routes\n  app.use(\"*\", (req, res) => {\n    res.status(404).json({\n      error: \"Not Found\",\n      message: `Route ${req.originalUrl} not found`,\n      availableEndpoints: [\n        \"GET /\",\n        \"GET /api/health\",\n        \"POST /api/auth/login\",\n        \"POST /api/auth/register\",\n        \"GET /api/auth/me\"\n      ]\n    });\n  });\n}"],
  "mappings": "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",
  "names": ["config", "Router", "Pool", "pool", "Pool", "messages", "router", "Router", "Router", "router", "Router", "app", "path", "path", "app", "config", "path"]
}
